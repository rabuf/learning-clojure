#+STARTUP: indent contents
#+OPTIONS: toc:nil num:nil
* Getting Clojure
** Part I. Basics
*** Chapter 1: Hello Clojure
**** The Very Basics
Starts out looking like lisp-meets-java (println being from java).
#+BEGIN_SRC clojure :results output :exports both
  (println "Hello, world!")
#+END_SRC

#+RESULTS:
: Hello, world!

=str= converts its arguments to a string form and concatenates them.
#+BEGIN_SRC clojure :exports both
  (str 1 " " 2 " " 3)
#+END_SRC

#+RESULTS:
: 1 2 3

=count= returns the count of a sequence
#+BEGIN_SRC clojure :exports both
  (count "aoeu")
#+END_SRC

#+RESULTS:
: 4
**** Arithmetic
#+BEGIN_SRC clojure :exports both
  (/ 1000 3)
#+END_SRC

#+RESULTS:
: 1000/3
Creates rational numbers if you try to divide an integer by something
that's not a proper divisor of it. Convenient.
#+BEGIN_SRC clojure :exports both
  (/ 1000.0 3)
#+END_SRC

#+RESULTS:
: 333.3333333333333
But floats stay floats.
**** Not Variable Assignment, but Close
#+BEGIN_SRC clojure :exports both
  (def first-name "Russ")
#+END_SRC

#+RESULTS:
: #'user/first-name
#+BEGIN_SRC clojure :exports both
  first-name
#+END_SRC

#+RESULTS:
: Russ
=def= binds things to names, they say to be careful with it. Guess
I'll learn why later.
**** A Function of Your Own
#+BEGIN_SRC clojure :exports both
  (defn hello-world []
    (println "Hello, World!"))
#+END_SRC

#+RESULTS:
: #'user/hello-world
#+BEGIN_SRC clojure :exports both :results output
  (hello-world)
#+END_SRC

#+RESULTS:
: Hello, World!

So a thing that trips me up, square-brackets are used to contain the
argument list. I don't know why.

#+BEGIN_SRC clojure :exports both
  (defn say-welcome [what]
    (println "Welcome to" what))
#+END_SRC

#+RESULTS:
: #'user/say-welcome

#+BEGIN_SRC clojure :exports both :results output
  (say-welcome "The Jungle")
#+END_SRC

#+RESULTS:
: Welcome to The Jungle

=println= sticks an extra space between each item so don't put spaces
in the strings unless you need them.

#+BEGIN_SRC clojure :results silent
  (defn average [a b]
    (/ (+ a b) 2.0))
#+END_SRC
#+BEGIN_SRC clojure :exports both
  (average 3 5)
#+END_SRC

#+RESULTS:
: 4.0

This is pretty much what I'd expect from a lisp. The last function in
this section shows that a function can have multiple expressions
that'll be executed in sequence:
#+BEGIN_SRC clojure :results silent
  (defn chatty-average [a b]
    (println "chatty-average function called")
    (println "** first argument:" a)
    (println "** second argument:" b)
    (/ (+ a b) 2.0))
#+END_SRC
#+BEGIN_SRC clojure :exports both :results output
  (chatty-average 10 20)
#+END_SRC

#+RESULTS:
: chatty-average function called
: ** first argument: 10
: ** second argument: 20

Like most lisps, the value of the last expression is the value
returned by the function call.
**** In the Wild
Now we're using lein to generate a new clojure application. I'm not
sure how well I can make that work with org-mode.
#+BEGIN_SRC shell
  lein new app blottsbooks
#+END_SRC

#+RESULTS:
: Generating a project called blottsbooks based on the 'app' template.

The initial version:
#+BEGIN_SRC clojure
  (ns blottsbooks.core
    (:gen-class))

  (defn -main
    "I don't do a whole lot ... yet."
    [& args]
    (println "Hello, World!"))
#+END_SRC

Modified:
#+BEGIN_SRC clojure
  (ns blottsbooks.core
    (:gen-class))
  (defn say-welcome [what]
    (println "Welcome to" what))

  (defn -main []
    "Welcome people to the store."
    (say-welcome "Blotts Books"))
#+END_SRC

#+BEGIN_SRC shell :results output
  (cd blottsbooks && lein run)
#+END_SRC

#+RESULTS:
: Welcome to Blotts Books

So using org-mode for this is ok so far. But will get tedious
later. In the future I'll want the org file in the base directory of
the proect.

=def= and =defn= both use the same namespace (this is a lisp-1, like
Scheme).
**** Staying Out of Trouble
Same kind of exceptions as in Java.
#+BEGIN_SRC clojure :exports both
  (/ 100 0)
#+END_SRC

#+RESULTS:
: class java.lang.ArithmeticExceptionclass java.lang.ArithmeticExceptionExecution error (ArithmeticException) at user/eval7119 (REPL:1).
: Divide by zero
*** Chapter 2: Vectors and Lists
**** One Thing After Another
#+BEGIN_SRC clojure :exports both :results raw
  [1 2 3 4]
#+END_SRC

#+RESULTS:
[1 2 3 4]

Square brackets define vectors, they can have mixed element types:
#+BEGIN_SRC clojure :exports both :results raw
  [1 "two" 3 "four"]
#+END_SRC

#+RESULTS:
[1 "two" 3 "four"]

They can also be nested:
#+BEGIN_SRC clojure :exports both :results raw
  [1 "two" [3 2 1] "four"]
#+END_SRC

#+RESULTS:
[1 "two" [3 2 1] "four"]
**** A Toolkit of Functions
=vector= will construct a vector from all its arguments
#+BEGIN_SRC clojure :exports both :results raw
  (vector 1 "two" 3 "four")
#+END_SRC

#+RESULTS:
[1 "two" 3 "four"]

count, first, rest all work like you'd expect. Conveniently you can
access the internals of a vector by treating the vector as a function:
#+BEGIN_SRC clojure :exports both :results raw
  (let [v [1 2 3 4]]
    (list
     (nth v 3) ;; = > 4
     (v 3))) ;; => 4
#+END_SRC

#+RESULTS:
(4 4)
**** Growing Your Vectors
=conj= will return a new vector with the new element added to the end:
#+BEGIN_SRC clojure :exports both :results raw
  (conj [1 2 3] 4)
#+END_SRC

#+RESULTS:
[1 2 3 4]

=cons= will put a new element at the front, but returns a list, not a
vector:
#+BEGIN_SRC clojure :exports both :results raw
  (cons 1 [2 3 4])
#+END_SRC

#+RESULTS:
(1 2 3 4)
**** Lists
Work much like vectors, and how you'd expect lists to work in a
lisp. A gotcha: =conj= works differently if used with a vector or
list. For a vector it adds to the /end/. For a list it adds to the
/beginning/. That's a peculiar difference to me, but I guess they had
their reasons.
#+BEGIN_SRC clojure :exports both :results raw
  (conj '(1 2 3) 4) ;; => (4 1 2 3)
#+END_SRC

#+RESULTS:
(4 1 2 3)
**** Lists versus Vectors
Some diagrams here illustrating the structure of both.

They actually mention what I noticed about =conj= here.

Lists are immutable in Clojure. So some nice consequences: count can
cache the result in the list so list traversal isn't needed for it.
**** Staying Out of Trouble
Reminder that lists and vectors are immutable.
**** In the Wild
Apparently most Clojure programmers and libraries use vectors over
lists, good to know.
*** Chapter 3: Maps, Keywords, and Sets
**** This Goes with That
#+BEGIN_SRC clojure :exports both :results raw
  {"title" "Oliver Twist" "author" "Dickens" "published" 1838}
#+END_SRC

#+RESULTS:
{"title" "Oliver Twist", "author" "Dickens", "published" 1838}

Written a bit like property lists in Common Lisp, but with curly
braces, these are actually hash maps. They can also be written with:
#+BEGIN_SRC clojure :exports both :results raw
  (hash-map
   "title" "Oliver Twist"
   "author" "Dickens"
   "published" 1838)
#+END_SRC

#+RESULTS:
{"author" "Dickens", "published" 1838, "title" "Oliver Twist"}

They can be accessed two ways: =get= or by treating the map as a function (like with vector):
#+BEGIN_SRC clojure :exports both :results raw
  (let [book {"title" "Oliver Twist" "author" "Dickens" "published" 1838}]
    (list (get book "title")
          (book "title")))
#+END_SRC

#+RESULTS:
("Oliver Twist" "Oliver Twist")
**** Keywords
Keywords are special kinds of symbols starting with a =:=. They're
preferred to string (or other atoms) as the key for hash maps. They
also let you access content when used in the function position:
#+BEGIN_SRC clojure :exports both :results raw
  (let [book {:title "Oliver Twist" :author "Dickens" :published 1838}]
    (list (get book :title)
          (book :title)
          (:title book)))
#+END_SRC

#+RESULTS:
("Oliver Twist" "Oliver Twist" "Oliver Twist")
**** Changing Your Map Without Changing It
=assoc= and =dissoc= allow you to add/remove elements of the
map. These also work with vectors (vectors are like maps but with
integers as the keys).
#+BEGIN_SRC clojure :exports both :results raw
  (let [book {:title "Dune" :author "Herbert"}]
    (list book
          (dissoc book :author)
          book)) ;; demonstrating that maps are immutable
#+END_SRC

#+RESULTS:
({:title "Dune", :author "Herbert"} {:title "Dune"} {:title "Dune", :author "Herbert"})
**** Other Handy Map Functions
=keys= returns the keys of a map as a list.

=vals= returns the values of a map as a list.

We also learn in this section that Clojure treats commas as
whitespace.
**** Sets
Sets are constructed with the literal:
#+BEGIN_SRC clojure :exports both :results raw
  #{1 2 3}
#+END_SRC

#+RESULTS:
#{1 3 2}

Duplicates in a literal will cause an error. Membership is tested with
=contains?=:

#+BEGIN_SRC clojure :exports both :results raw
  (contains? #{1 2 3 4} 4)
#+END_SRC

#+RESULTS:
true

Values can be inserted with =conj= and removed with =disj=. =conj=
doesn't cause errors if a value is already a member of the set.

Sets can also be used (like maps and vectors) in the function position
to test membership:
#+BEGIN_SRC clojure :results raw :exports both
  (list
   (#{1 2 3 4} 1)
   (#{1 2 3 4} 5))
#+END_SRC

#+RESULTS:
(1 nil)
*** Chapter 4: Logic
**** The Fundamental If
Works like in Common Lisp. Takes truthy and falsy values (nil is
synonymous with false, everything else is synonymous with
true). Optional else expression.
**** Asking a Question
General things like equality testing (=) and its opposite, boolean
expressions (not, and, or), and predicates (scheme-style, uses ?).

Like in CL, =and= and =or= are short circuiting and return the last
evaluated expression.
**** Truthy and Falsy
Main takeaway: Empty collections aren't nil (including the empty
list).
**** Do and When
=do= is like =progn= and returns the value of the last expression.

=when= is the same as I'd expect, it's equivalent to:
#+BEGIN_SRC clojure
  (if <expr>
    (do <exprs>))
#+END_SRC
Without the explicit =do=.
**** Dealing with Multiple Conditions
Clojure has a =cond= similar to Common Lisp's but not the same. Main
difference is in CL there are implicit =progn='s, but not in Clojure.
#+BEGIN_SRC clojure :exports both :results raw
  (cond
    (< 100 50) 10
    :else 20)
#+END_SRC

#+RESULTS:
20

=:else= instead of =t=

There's also =case= which works similarly to in CL:
#+BEGIN_SRC clojure
  (case expr
    :val :result
    :other-val :result
    default-value-is-last)
#+END_SRC
**** Throwing and Catching
Looks a lot like in Java:
#+BEGIN_SRC clojure :results output :exports both
  (try
    (/ 100 0)
    (catch ArithmeticException e (println "Division by 0 is bad, mkay?")))
#+END_SRC

#+RESULTS:
: Division by 0 is bad, mkay?

Exceptions can be thrown manually like so:
#+BEGIN_SRC clojure :exports both
  (throw (ex-info "Something went wrong" {}))
#+END_SRC

#+RESULTS:
: class clojure.lang.ExceptionInfoclass clojure.lang.ExceptionInfoExecution error (ExceptionInfo) at user/eval7235 (REPL:1).
: Something went wrong
*** Chapter 5: More Capable Functions
**** One Function, Different Parameters
Can handle multiple-arities for functions like so:
#+BEGIN_SRC clojure :results silent
  (defn greet
    ([to-whom] (greet "Welcome to Blotts Books" to-whom))
    ([message to-whom] (println message to-whom)))
#+END_SRC
#+BEGIN_SRC clojure :results output :exports both
  (greet "Jared")
  (greet "Hey" "buddy")
#+END_SRC

#+RESULTS:
: Welcome to Blotts Books Jared
: Hey buddy
**** Arguments with Wild Abandon
=&= followed by a variable turns a function into a variadic function,
able to take an arbitrary number of arguments.
#+BEGIN_SRC clojure :results silent
  (defn foo [& args]
    (println args))
#+END_SRC
#+BEGIN_SRC clojure :results output :exports both
  (foo 1 2 3 4 "aoeu")
#+END_SRC

#+RESULTS:
: (1 2 3 4 aoeu)
**** Multimethods
With =defmulti= and =defmethod= we can specialize on a custom
discriminator. Here's a silly collatz conjecture using multimethods:
#+BEGIN_SRC clojure :results silent
  (defn odd-even-or-one [n]
    (cond
      (even? n) :even
      (= 1 n) :one
      (odd? n) :odd))

  (defmulti collatz odd-even-or-one)

  (defmethod collatz :one [n]
    1)

  (defmethod collatz :even [n]
    (+ 1 (collatz (/ n 2))))

  (defmethod collatz :odd [n]
    (+ 1 (collatz (+ 1 (* 3 n)))))
#+END_SRC
#+BEGIN_SRC clojure :exports both
  (collatz 129)
#+END_SRC

#+RESULTS:
: 122

The discriminator function is called on the parameter and used to
select which method implementation to use.
**** Deeply Recursive
TCE isn't really a thing in Clojure, so there's a workaround for
recursive calls: =recur= and =loop=.
#+BEGIN_SRC clojure :results silent
  (defn factorial
    ([n] (factorial n 1))
    ([n acc]
     (if (= n 1)
       acc
       (recur
        (- n 1)
        (* n acc)))))

  (defn fact-loop [n]
    (loop [n n acc 1]
      (if (= n 1)
        acc
        (recur
         (- n 1)
         (* n acc)))))
#+END_SRC

=loop= lets you do things a bit more cleanly.
**** Docstrings
After the name of a function definition, a string can be included
which is the "docstring" and clojure can look it up with the =doc=
function:
#+BEGIN_SRC clojure :results output
  (defn average
    "Returns the average of a and b"
    (/ (+ a b) 2))
  (doc doc)
  (doc average)
#+END_SRC

#+RESULTS:
#+begin_example
-------------------------
clojure.repl/doc
([name])
Macro
  Prints documentation for a var or special form given its name,
   or for a spec if given a keyword
-------------------------
user/average
([a b])
class clojure.lang.Compiler$CompilerExceptionclass clojure.lang.Compiler$CompilerExceptionSyntax error macroexpanding clojure.core/defn at (clojure:localhost:55664(clj)*:1:1).
/ - failed: vector? at: [:fn-tail :arity-n :bodies :params] spec: :clojure.core.specs.alpha/param-list
(/ (+ a b) 2) - failed: vector? at: [:fn-tail :arity-1 :params] spec: :clojure.core.specs.alpha/param-list
#+end_example
**** Pre and Post Conditions
So this is cool. Seems to be along the lines of pre/post conditions in
a design-by-contract style. I'm curious what the limitations are:
#+BEGIN_SRC clojure :results silent
  (defn fact-pre-post [n]
    {:pre [(integer? n) (> n 0)]
     :post [(integer? %)]}
    (loop [n n acc 1]
      (if (= n 1)
        acc
        (recur
         (- n 1)
         (* n acc)))))
#+END_SRC
Now an exception will be thrown when either the pre or post assertions
fail.
#+BEGIN_SRC clojure :exports both
  (fact-pre-post -10)
  (fact-pre-post 10.0)
#+END_SRC

#+RESULTS:
: class java.lang.AssertionErrorclass java.lang.AssertionErrorclass java.lang.AssertionErrorclass java.lang.AssertionErrorExecution error (AssertionError) at user/fact-pre-post (REPL:1).
: Assert failed: (> n 0)
: Execution error (AssertionError) at user/fact-pre-post (REPL:1).
: Assert failed: (integer? n)
*** Chapter 6: Functional Things
**** Functions are Values
The point is that functions can be passed as values to other functions
and called there.
#+BEGIN_SRC clojure :results silent
  (defn both? [predicate-1 predicate-2 object]
    (when (and (predicate-1 object)
               (predicate-2 object))
      object))
#+END_SRC
#+BEGIN_SRC clojure :exports both
  (both? integer? even? 20)
#+END_SRC

#+RESULTS:
: 20
You can use this with maps, too:
#+BEGIN_SRC clojure :exports both :results raw
  (let [book {:title "Dune" :author "Herbert" :genre :scifi}]
    (list (both? :title :author book)
          (both? :title :isbn book)))
#+END_SRC

#+RESULTS:
({:title "Dune", :author "Herbert", :genre :scifi} nil)
**** Functions on the Fly
=fn= is used to create anonymous functions:
#+BEGIN_SRC clojure :exports both
  ((fn [n] (* 2 n)) 3)
#+END_SRC

#+RESULTS:
: 6

They also allow for closures (capture of variables from the
environment):
#+BEGIN_SRC clojure :exports both :results output
  (defn make-multiplier [n]
    (fn [x] (* n x)))

  (println ((make-multiplier 2) 10))
  (println ((make-multiplier 3) 10))
#+END_SRC

#+RESULTS:
: 20
: 30
**** A Functional Toolkit
=apply=, =partial=, =every-pred=, =complement= and others.
**** Function Literals
Can use =#(...)= to define a literal function, with %, %1, etc as the
arguments.
#+BEGIN_SRC clojure :exports both :results output
  (defn make-adder [n]
    #(+ n %))

  (println ((make-adder 2) 10))
  (println ((make-adder 3) 10))
#+END_SRC

#+RESULTS:
: 12
: 13
*** Chapter 7: Let
**** A Local, Temporary Place for Your Stuff
Basic intro to let and its purpose. I've already been using it, but it
creates local variables, compared to =def= and =defn= which are
globally visible.
**** Let Over Fn
Variables declared in a =let= can be captured in closures, like I did
with =make-multiplier= and =make-adder= above.
#+BEGIN_SRC clojure :exports both :results output
  (def discount-table {:alice 0.10 :bob 0.05})
  (defn make-discount-f [person]
    (let [discount (person discount-table)]
      (fn [amount]
        (* amount (- 1.0 discount)))))
  (println ((make-discount-f :alice) 10))
  (println ((make-discount-f :bob) 10))
#+END_SRC

#+RESULTS:
: 9.0
: 9.5

I don't know if this is a Clojure thing or just this book, but they
use =-f= as the suffix for functions that return functions. I'll try
to adopt this.
**** Variations on the Theme
Neat, they have =if-let= and =when-let= that will perform a binding
and, based on that, perform or not perform the next expression:
#+BEGIN_SRC clojure :exports both :results output
  (let [book {:author "Herbert" :title "Dune"}]
    (if-let [genre (:genre book)]
      (println genre)
      (println "No genre."))
    (when-let [author (:author book)]
      (println author)))
#+END_SRC

#+RESULTS:
: No genre.
: Herbert
NB: =let= functions like =let*= in CL, each assignment is done in
series. This means they can refer back to earlier assignments.
*** Chapter 8: Def, Symbols, and Vars
**** A Global, Stable Place for Your Stuff
More about =def= and =defn= being global. Also, =defn= is just
shorthand for =def ... (fn...=:
#+BEGIN_SRC clojure :results silent
  (def increment
    (fn [n] (+ 1 n)))

  (defn increment [n]
    (+ 1 n))
#+END_SRC
**** Symbols Are Things
Symbols have to be quoted to see them and not the thing bound to
them. Same in CL and Scheme.

Symbols are = to themselves, no need for eq, eql, or anything else.
**** Bindings Are Things Too
Can get the value or the symbol of a bound variable using =.get= and
=.-sym=.
**** Varying Your Vars
There's notion of dynamic variables, like in CL, that can use a
=binding= expression to redefine them within some context:
#+BEGIN_SRC clojure :results output :exports both
  (def ^:dynamic *book* {:author "Herbert" :title "Dune"})

  (defn get-author []
    (:author *book*))

  (do
    (println (get-author))
    (binding [*book* {:author "Heinlein" :title "Stranger in a Strange Land"}]
      (println (get-author))))
#+END_SRC

#+RESULTS:
: Herbert
: Heinlein

Like in CL they've adopted the =*...*= notation to indicate dynamic
variables. They also have to be explicitly declared dynamic as done
above.
*** Chapter 9: Namespaces
**** A Place for Your Vars
We can use =ns= to (optionally) create a namespace and switch to it.
**** Loading Namespaces
They can be loaded using =require= as in:
#+BEGIN_SRC clojure :results silent
  (require 'clojure.data)
#+END_SRC
NB: The required naemspace has to be quoted here.
**** A Namespace of Your Own
Back to the Blotts Books example:
#+BEGIN_SRC clojure :tangle blottsbooks/src/blottsbooks/core.clj
  (ns blottsbooks.core
    (:require blottsbooks.pricing)
    (:gen-class))

  (defn -main []
    (println
     (blottsbooks.pricing/discount-price
      {:title "Emma" :price 9.99})))
#+END_SRC
NB: The namespace also describes its *path* in the filesystem. This is
similar to Java's packages. To create a pricing namespace we'd need a
file in the =blottsbooks= directory called =pricing.clj=:
#+BEGIN_SRC clojure :tangle blottsbooks/src/blottsbooks/pricing.clj
  (ns blottsbooks.pricing)

  (def discount-rate 0.15)

  (defn discount-price [book]
    (- (:price book)
       (* discount-rate (:price book))))
#+END_SRC

#+BEGIN_SRC shell :results output :exports both
  (cd blottsbooks && lein run)
#+END_SRC

#+RESULTS:
: 8.4915
**** As and Refer
=as= lets you rename a namespace to something more convenient. =refer=
lets you import a specific symbol.
#+BEGIN_SRC clojure
  (ns blottsbooks.core
    (:require [blottsbooks.pricing :as pricing])
    (:gen-class))
#+END_SRC

Gives us a nice abbreviation so that
=blottsbooks.pricing/discount-price= becomes =pricing/discount-price=.
#+BEGIN_SRC clojure
  (ns blottsbooks.core
    (:require [blottsbooks.pricing :refer [discount-price]])
    (:gen-class))
#+END_SRC
Would bring the =discount-price= function directly into scope.
**** Namespaces, Symbols, and Keywords
=*ns*= contains the current namespace, =ns-map= and =find-ns= can tell
you about a namespace, etc.
** Part II. Intermediate
*** Chapter 10: Sequences
**** One Thing After Another
=seq= will take any collection and return a sequence from it.
**** A Universal Interface
=first=, =rest=, =next=, etc. all take sequences. They actually take
any collection and turn them into sequences and then return a result.
**** A Rich Toolkit ...
=sort=, =reverse=, =interleave=, =interpose=, =partition= are
introduced.
**** ... Made Richer with Functional Values
=filter=, =some= are introduced. Filter removes everything that
doesn't pass the predicate. Some returns true if anything passes the
predicate.
**** Map
=map= applies a function to all members of a sequence.

=for= is like =map= and builds a sequence result but looks like a for
loop.
#+BEGIN_SRC clojure :exports both 
  (for [i [1 2 3 4 5 6]]
    (even? i))
#+END_SRC

#+RESULTS:
| false | true | false | true | false | true |
**** Reduce
=reduce= is a fold. Takes a function, initial value, and
sequence. Repeatedly applying the function until the sequence is
exhausted.
#+BEGIN_SRC clojure :exports both
  (reduce + 0 [1 2 3 4 5 6])
#+END_SRC

#+RESULTS:
: 21
**** Composing a Solution
Shows stringing the above functions together to create a solution to a
particular problem.
**** Other Sources of Sequences
=line-seq= takes a file and returns each line as a string in a
sequence.

=re-matches=, =re-seq= will return if something matches, or a sequence
of all the matches.
#+BEGIN_SRC clojure :exports both
  (re-seq #"-?\d+" "-1 2 3 4 -10")
#+END_SRC

#+RESULTS:
| -1 | 2 | 3 | 4 | -10 |
**** In the Wild
They finally explain =->>= which has shown up in a couple other
places. It takes the result of a first expression and feeds it into
the next, and repeats until all expressions have been called. =->>=
puts the argument at the end of the argument list. =->= puts it at the front
#+BEGIN_SRC clojure :exports both
  (list (->> 100
             (/ 5)
             (- 3))
        (-> 100
            (/ 5)
            (- 3)))
#+END_SRC

#+RESULTS:
| 59/20 | 17 |
*** Chapter 11: Lazy Sequences
**** Sequences Without End
Can create an infinitely repeating sequence with =repeat=.
#+BEGIN_SRC clojure :results silent
  (def repeated-text (repeat "All work and no play..."))
#+END_SRC
Be careful not to ask for a print out of =repeated-text='s value in
the REPL.

This will work with most sequence functions (take, nth, first, rest,
etc.).
**** More Interesting Laziness
=cycle= will repeat a sequence. =iterate= will generate the next
values based on a passed in function and initial value.
**** Lazy Friends
=map=, =interleave=, =take= and others are lazy as well. They won't
return results until they're asked for (such as to be printed in the
REPL, again, be careful).
#+BEGIN_SRC clojure :exports both
  (def evens (map #(* % 2) (iterate inc 0)))
  (def odds (map #(+ (* % 2) 1) (iterate inc 0)))
  (take 5 (interleave evens odds))
#+END_SRC

#+RESULTS:
: #'user/evens#'user/odds(0 1 2 3 4)
**** Laziness in Practice
Shows more combinations of lazy sequences.
**** Behind the Scenes
=lazy-seq= returns a sequence like =seq= but doesn't evaluate what it
was given until it's needed.
#+BEGIN_SRC clojure :exports both
  (defn my-iterate [f x]
    (cons x (lazy-seq (my-iterate f (f x)))))

  (take 5 (my-iterate inc 1))
#+END_SRC

#+RESULTS:
: #'user/my-iterate(1 2 3 4 5)
This will be useful for any kind of generator.
*** Chapter 12: Destructuring
**** Pry Open Your Data
Destructuring bind is worked into let:
#+BEGIN_SRC clojure :exports both :results output
  (let [numbers [1 2 3]]
    (let [[x y z] numbers]
      (println (* x y z))))
#+END_SRC

#+RESULTS:
: 6
**** Getting Less than Everything
Extra values are ignored if they don't have a variable mapping
#+BEGIN_SRC clojure :exports both :results output
  (let [numbers [1 2 3 4]]
    (let [[x y z] numbers]
      (println (* x y z))))
#+END_SRC

#+RESULTS:
: 6
#+BEGIN_SRC clojure :exports both :results output
  (let [numbers [1 2 [3 4]]]
    (let [[x y z] numbers]
      (println (list x y z))))
#+END_SRC

#+RESULTS:
: (1 2 [3 4])

#+BEGIN_SRC clojure :exports both :results output
  (let [numbers [1 2 [3 4]]]
    (let [[x y [w z]] numbers]
      (println (list x y z))))
#+END_SRC

#+RESULTS:
: (1 2 4)

And we can go more deeply into the structure.
#+BEGIN_SRC clojure :exports both :results output
  (let [numbers [1 2 [3 4]]]
    (let [[x y [w z] a b] numbers]
      (println (list x y z a b))))
#+END_SRC

#+RESULTS:
: (1 2 4 nil nil)
If nothing matches we get =nil= as a result.
**** Destructuring in Sequence
It works with any sequence:
#+BEGIN_SRC clojure :exports both :results output
  (let [name "Jane"]
    (let [[a b c d] name]
      (println a b c d)))
#+END_SRC

#+RESULTS:
: J a n e
**** Destructuring Function Arguments
And it works with function arguments:
#+BEGIN_SRC clojure :exports both :results output
  (defn first-three-letters [[a b c]]
    (list a b c))
  (let [name "Jane"]
    (println (first-three-letters name)))
#+END_SRC

#+RESULTS:
: (J a n)
**** Digging into Maps
#+BEGIN_SRC clojure :exports both :results output
  (let [book {:title "Dune" :author "Herbert" :year 1965 :genre "scifi"}]
    (let [{title :title author :author} book]
      (println title "by" author)))
#+END_SRC

#+RESULTS:
: Dune by Herbert
**** Diving into Nested Maps
#+BEGIN_SRC clojure :exports both :results output
  (let [book {:title "Dune" :author {:last "Herbert" :first "Frank"} :year 1965 :genre "scifi"}]
    (let [{title :title {first :first last :last} :author} book]
      (println title "by" first last)))
#+END_SRC

#+RESULTS:
: Dune by Frank Herbert
**** The Final Frontier: Mixing and Matching
And all these can be used together (sequence and map destructuring).
**** Going Further
Can specify the desired keys and automatically have variables created
by the same name:
#+BEGIN_SRC clojure :exports both :results output
  (let [book {:title "Dune" :author {:last "Herbert" :first "Frank"} :year 1965 :genre "scifi"}]
    (let [{:keys [title] {:keys [first last] :as author} :author} book]
      (println title "by" first last author)))
#+END_SRC

#+RESULTS:
: Dune by Frank Herbert {:last Herbert, :first Frank}
